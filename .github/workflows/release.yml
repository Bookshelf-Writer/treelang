# .github/workflows/release.yml
name: "release & publish"

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "–ì—ñ–ª–∫–∞ –∑ —è–∫–æ—ó —Ä–æ–±–∏–º–æ —Ä–µ–ª—ñ–∑"
        default: "main"
        required: false

env:
  GO_VERSION: "1.24.2"
  PUSH_BRANCH: ${{ inputs.branch || 'main' }}

jobs:
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1. PREPARE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  prepare:
    name: "üîß –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞"
    runs-on: ubuntu-latest
    steps:
      - name: üõéÔ∏è Checkout ${{ env.PUSH_BRANCH }}
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PUSH_BRANCH }}
          fetch-depth: 0

      - name: üîß –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: üì• –ó—á–∏—Ç–∞—Ç–∏ –≤–µ—Ä—Å—ñ—é –∑ build-—Å–∫—Ä–∏–ø—Ç—ñ–≤
        id: ver
        shell: bash
        run: |
          set -Eeuo pipefail
          nameBuild=$(./_run/scripts/sys.sh -n)
          versionBuild=$(./_run/scripts/sys.sh -v)

          # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞–∫–æ–∂ —É —Ñ–∞–π–ª –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö job‚Äô—ñ–≤
          echo "BUILD_NAME=$nameBuild"   >  build_env.txt
          echo "BUILD_VER=$versionBuild" >> build_env.txt

          echo "name=$nameBuild"   >> $GITHUB_OUTPUT
          echo "version=$versionBuild" >> $GITHUB_OUTPUT

          echo "‚úîÔ∏è  –ó–Ω–∞–π–¥–µ–Ω–æ –≤–µ—Ä—Å—ñ—é: $versionBuild (—ñ–º º—è –ø–∞–∫–µ—Ç—É: $nameBuild)"

      - name: üöÄ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ build-env –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        uses: actions/upload-artifact@v4
        with:
          name: build-env
          path: build_env.txt

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2. GENERATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  generate:
    name: "üóÇÔ∏è –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–∏—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏"
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: üõéÔ∏è Checkout ${{ env.PUSH_BRANCH }}
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PUSH_BRANCH }}
          fetch-depth: 0

      - name: üîß –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: üõ†Ô∏è go generate
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p target tmp  
          go generate

      - name: üì¶ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —è–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        uses: actions/upload-artifact@v4
        with:
          name: src-gen
          path: .
          retention-days: 1

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3. BUILD ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  build:
    name: "üõ†Ô∏è –ó–±—ñ—Ä–∫–∞ [${{ matrix.os }}]"
    needs: [ generate ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: üì• Download env
        uses: actions/download-artifact@v4
        with:
          name: build-env
          path: .

      - name: üóíÔ∏è Source env
        shell: bash
        run: cat build_env.txt >> $GITHUB_ENV

      - name: üì• Download –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
        uses: actions/download-artifact@v4
        with:
          name: src-gen
          path: repo

      - name: üîß –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: üóÇÔ∏è –ö–µ—à –º–æ–¥—É–ª—ñ–≤ Go
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.os == 'Windows' && 'C:\Users\runneradmin\go\pkg\mod' || '~/.cache/go-build' }}
            ${{ runner.os == 'Windows' && 'C:\Users\runneradmin\go\bin' || '~/go/bin' }}
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('repo/go.mod') }}
          restore-keys: ${{ runner.os }}-go

      - name: üõ†Ô∏è go build
        id: build
        shell: bash
        working-directory: repo
        run: |
          set -Eeuo pipefail
          
          case "${{ runner.os }}" in
            Windows) out="treelang.windows.exe" ;;
            Linux)   out="treelang.linux.bin"   ;;
            Darwin)   out="treelang.darwin.bin"  ;;
          esac
          
          go mod tidy
          go build -ldflags="-s -w" -o "$out" ./cli/...
          [[ "$out" == *.bin ]] && chmod +x "$out"
          
          echo "OUT=$out"           >> $GITHUB_ENV 
          echo "out=$out"           >> $GITHUB_OUTPUT


      - name: üì¶ Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.out }}
          if-no-files-found: error
          path: repo/${{ steps.build.outputs.out }}

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 4. RELEASE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  release:
    name: "üöÄ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —Ä–µ–ª—ñ–∑—É"
    needs: [ build ]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: üõéÔ∏è Checkout ${{ env.PUSH_BRANCH }}
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PUSH_BRANCH }}
          fetch-depth: 0

      - name: üì• Download env
        uses: actions/download-artifact@v4
        with:
          name: build-env
          path: .

      - name: üóíÔ∏è Source env
        shell: bash
        run: cat build_env.txt >> $GITHUB_ENV

      - name: üì• Download binaries
        uses: actions/download-artifact@v4
        with:
          pattern: treelang.*
          merge-multiple: true
          path: dist

      - name: üë§ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ git-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        shell: bash
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: üè∑Ô∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ commit –±–µ–∑ ¬´–≤–∞–∂–∫–æ–≥–æ¬ª —Ç–∞ tag ${BUILD_VER}
        id: tag
        shell: bash
        run: |
          set -Eeuo pipefail
          ORIG_SHA=$(git rev-parse HEAD)

          mkdir -p target
          go generate         

          # 1Ô∏è‚É£ –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ —à–ª—è—Ö–∏ –ª–∏—à–µ –∑ —ñ–Ω–¥–µ–∫—Å—É ‚Äî –±–µ–∑ –ø–æ–º–∏–ª–æ–∫, —è–∫—â–æ —Ñ–∞–π–ª—ñ–≤ –Ω–µ–º–∞—î
          git rm -r --cached --ignore-unmatch .github _generate _run cli gen.go
          git rm --cached --ignore-unmatch $(git ls-files '*.bin' '*.md')
          
          # 2Ô∏è‚É£ –ö–æ–º—ñ—Ç —Ç–∞ —Ç–µ–≥
          git commit -m "release(${BUILD_VER}): strip heavy assets"
          git tag -a "${BUILD_VER}" -m "Release ${BUILD_VER}"
          git push origin "${BUILD_VER}"

          # 3Ô∏è‚É£ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ repo –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
          git reset --hard "$ORIG_SHA"

      - name: üöÄ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–ª—ñ–∑
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_VER }}
          name: ${{ env.BUILD_VER }}
          generate_release_notes: true
          files: |
            dist/**/*.bin
            dist/**/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚úîÔ∏è –ì–æ—Ç–æ–≤–æ
        run: |
          new_version=$(./_run/scripts/sys.sh --increment --minor)
          
          git add ./_run/values/ver.txt
          git commit -m "actions [$new_version] "$'\n'"Build: [${BUILD_VER}] >> [$new_version]"
          git push origin HEAD:main
          
          echo "üéâ –†–µ–ª—ñ–∑ $BUILD_VER —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!"
