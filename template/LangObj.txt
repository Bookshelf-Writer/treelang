
import (
	"bytes"
	"encoding/base64"
	"fmt"
	"github.com/srwiley/oksvg"
	"github.com/srwiley/rasterx"
	"image"
	"image/png"
)

// // // // // // // // // // // // // // // // // //

type LangInfoNameObj struct {
	EN  string `json:"en"`
	DEF string `json:"def"`
}

type LangInfoObj[V string | *image.RGBA] struct {
	Code string           `json:"code"`
	Name *LangInfoNameObj `json:"name"`
	Flag V                `json:"flag"`
}

type LangSysObj struct {
	Date string  `json:"date"`
	Hash string  `json:"hash"`
}

type LangObj[V string | *image.RGBA] struct {
	Info    *LangInfoObj[V] `json:"info"`
	Sys     *LangSysObj     `json:"sys"`
	Data    any             `json:"data"`
}

// // // // //

func svgToPNG(svgStr string) (*image.RGBA, error) {
	svgReader := bytes.NewReader([]byte(svgStr))

	icon, err := oksvg.ReadIconStream(svgReader)
	if err != nil {
		return nil, err
	}

	width := 600
	height := 400
	if icon.ViewBox.W != 0 || icon.ViewBox.H != 0 {
		width = int(icon.ViewBox.W)
		height = int(icon.ViewBox.H)
	}

	img := image.NewRGBA(image.Rect(0, 0, width, height))
	icon.SetTarget(0, 0, float64(width), float64(height))
	dasher := rasterx.NewDasher(width, height, rasterx.NewScannerGV(width, height, img, img.Bounds()))
	icon.Draw(dasher, 1.0)

	return img, nil
}

func pngToSVG(img *image.RGBA) (string, error) {
	var pngBuffer bytes.Buffer
	if err := png.Encode(&pngBuffer, img); err != nil {
		return "", err
	}

	pngBytes := pngBuffer.Bytes()
	encodedData := base64.StdEncoding.EncodeToString(pngBytes)

	width := 600
	height := 400
	if img.Bounds().Dx() != 0 || img.Bounds().Dy() != 0 {
		width = img.Bounds().Dx()
		height = img.Bounds().Dy()
	}

	svgTemplate := `<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg width="%d" height="%d" version="1.1" xmlns="http://www.w3.org/2000/svg"><image width="%d" height="%d" href="data:image/png;base64,%s" /></svg>`
	svgStr := fmt.Sprintf(svgTemplate, width, height, width, height, encodedData)
	return svgStr, nil
}

// //

func (obj *LangInfoObj[V]) ImgPng() (*image.RGBA, error) {
	switch v := any(obj.Flag).(type) {
	case string:
		return svgToPNG(v)
	case *image.RGBA:
		return v, nil
	default:
		return nil, fmt.Errorf("unsupported type: %T", v)
	}
}

func (obj *LangInfoObj[V]) ImgSvg() (string, error) {
	switch v := any(obj.Flag).(type) {
	case string:
		return v, nil
	case *image.RGBA:
		return pngToSVG(v)
	default:
		return "", fmt.Errorf("unsupported type: %T", v)
	}
}